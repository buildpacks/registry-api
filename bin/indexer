#!/usr/bin/env node

const fs = require('fs');
const execa = require('execa');
const path = require('path');
const os = require('os');

(async () => {
    await registryLogin();
    let tempPath = execa.sync('mktemp', ['-d']).stdout
    let repoPath = path.join(tempPath, 'tmp')
    let indexPath = path.join(tempPath, "index.json")
    while (true) {
        console.log('at=main level=info msg="trying to update registry-index repo"');
        const success = await createUpdateRepo(repoPath);
        if (success) {
            console.log('at=main level=info msg="building index config data cache"');
            fs.writeFileSync(indexPath, JSON.stringify(getNormalisedRegistry(repoPath)))
            console.log('at=main level=info msg="serialized index to file"');
            await buildIndex(indexPath)
            console.log('at=main level=debug msg="done building index config data cache"');
        } else {
            console.log('at=main level=warn msg="failed to update registry-index repo"');
        }
        await sleep(300000); // wait 5 minutes
    }
})();

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function buildIndex(indexPath) {
    try {
        let subProc = execa('./bin/index-buildpacks', [indexPath])
        subProc.stdout.pipe(process.stdout);
        subProc.stderr.pipe(process.stderr);
        await subProc
    } catch (err) {
        console.error(err);
    }
}

function getNormalisedRegistry(registryPath) {
    const files = fs.readdirSync(registryPath);

    // Pre-filter all hidden files/dirs and files at the root level
    let dirsBuffer = files.filter(file => {
        return file[0] !== '.' && fs.statSync(path.join(registryPath, file)).isDirectory();
    }).map(filename => path.join(registryPath, filename));

    let registry = [];
    while(dirsBuffer.length > 0) {
        let tempBuffer = [];

        dirsBuffer.forEach(file => {
            if (fs.statSync(file).isDirectory()) {
                const childrenFiles = fs.readdirSync(file);
                childrenFiles.forEach(childFile => {
                    tempBuffer.push(path.join(file, childFile));
                });
            } else {
                const registryFile = fs.readFileSync(file, 'UTF-8');
                registry = registry.concat(registryFile.split(os.EOL).map(line => {
                    try {
                        return Object.assign(JSON.parse(line), {
                            description: '',
                            license: ''
                        });
                    } catch (error) {
                        // Do nothing
                    }
                }).filter(element => !!element));
            }

            dirsBuffer = tempBuffer;
        });
    }

    return registry;
}

async function createUpdateRepo(repoPath) {
    try {
        if (fs.existsSync(repoPath)) {
            try {
                await execa('git', ['-C', `${repoPath}`, 'pull']);
            } catch (error) {
                console.error(error);
                return false;
            }
        } else {
            fs.mkdirSync(repoPath);
            await execa('git', ['clone', 'https://github.com/buildpacks/registry-index.git', `${repoPath}`]);
        }
    } catch (err) {
        console.error(err);
        return false;
    }

    return true;
}

// Create or update ~/.docker/config with credentials from the environment.
// Adding credentials to this file allows the indexer to login to remote
// registries and access higher rate limits.
async function registryLogin() {
  const dockerCfgDir = path.join(process.env.HOME, ".docker");
  const dockerCfgPath = path.join(dockerCfgDir, "config.json");
  let dockerCfgContent;
  console.log('at=registryLogin level=info msg="reading docker config file"')
  try {
    dockerCfgContent = fs.readFileSync(dockerCfgPath);
    console.log('at=registryLogin level=info msg="existing docker config file found"')
  } catch {
    console.log('at=registryLogin level=info msg="existing docker config file not found"')
  }
  let dockerCfg = {};
  if (dockerCfgContent) {
    try {
      dockerCfg = JSON.parse(dockerCfgContent);
    } catch {
      console.log('at=registryLogin level=info msg="existing docker config file could not be parsed"')
      return;
    }
  }

  if (!dockerCfg.auths) {
    dockerCfg.auths = {};
  }

  if (process.env.DOCKERHUB_TOKEN) {
    console.log('at=registryLogin level=info msg="setting dockerhub credentials"')
    let dockerhubHost = process.env.DOCKERHUB_HOST || "https://index.docker.io/v1/";
    let dockerhubUser = process.env.DOCKERHUB_USER;
    let dockerhubToken = process.env.DOCKERHUB_TOKEN;
    let dockerhubEmail = process.env.DOCKERHUB_EMAIL;
    let dockerhubAuth = Buffer.from(`${dockerhubUser}:${dockerhubToken}`).toString('base64');
    let dockerhubCfg = { auth: dockerhubAuth };
    if (dockerhubEmail) {
      dockerhubCfg.email = dockerhubEmail;
    }
    dockerCfg.auths[dockerhubHost] = dockerhubCfg;
  }

  try {
    fs.mkdirSync(dockerCfgDir, { recursive: true });
  } catch(err) {
    console.log(`at=registryLogin level=info msg="failed to create docker config directory" err="${err}"`)
  }

  console.log('at=registryLogin level=info msg="writing docker config file"')
  try {
    fs.writeFileSync(dockerCfgPath, JSON.stringify(dockerCfg));
  } catch(err) {
    console.log(`at=registryLogin level=info msg="failed to write docker config file" err="${err}"`)
  }
  console.log('at=registryLogin level=info msg="done"')
};
